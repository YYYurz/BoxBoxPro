// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfig
{

using global::System;
using global::FlatBuffers;

public struct DTVocation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DTVocation GetRootAsDTVocation(ByteBuffer _bb) { return GetRootAsDTVocation(_bb, new DTVocation()); }
  public static DTVocation GetRootAsDTVocation(ByteBuffer _bb, DTVocation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DTVocation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float MaxHealth { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MoveSpeed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<DTVocation> CreateDTVocation(FlatBufferBuilder builder,
      uint Id = 0,
      float MaxHealth = 0.0f,
      float MoveSpeed = 0.0f) {
    builder.StartObject(3);
    DTVocation.AddMoveSpeed(builder, MoveSpeed);
    DTVocation.AddMaxHealth(builder, MaxHealth);
    DTVocation.AddId(builder, Id);
    return DTVocation.EndDTVocation(builder);
  }

  public static void StartDTVocation(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddId(FlatBufferBuilder builder, uint Id) { builder.AddUint(0, Id, 0); }
  public static void AddMaxHealth(FlatBufferBuilder builder, float MaxHealth) { builder.AddFloat(1, MaxHealth, 0.0f); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, float MoveSpeed) { builder.AddFloat(2, MoveSpeed, 0.0f); }
  public static Offset<DTVocation> EndDTVocation(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DTVocation>(o);
  }
};

public struct DTVocationList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DTVocationList GetRootAsDTVocationList(ByteBuffer _bb) { return GetRootAsDTVocationList(_bb, new DTVocationList()); }
  public static DTVocationList GetRootAsDTVocationList(ByteBuffer _bb, DTVocationList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DTVocationList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DTVocation? Data(int j) { int o = __p.__offset(4); return o != 0 ? (DTVocation?)(new DTVocation()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DTVocationList> CreateDTVocationList(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    DTVocationList.AddData(builder, dataOffset);
    return DTVocationList.EndDTVocationList(builder);
  }

  public static void StartDTVocationList(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<DTVocation>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<DTVocation>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DTVocationList> EndDTVocationList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DTVocationList>(o);
  }
};


}
