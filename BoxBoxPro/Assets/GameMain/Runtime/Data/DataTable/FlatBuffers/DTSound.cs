// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfig
{

using global::System;
using global::FlatBuffers;

public struct DTSound : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DTSound GetRootAsDTSound(ByteBuffer _bb) { return GetRootAsDTSound(_bb, new DTSound()); }
  public static DTSound GetRootAsDTSound(ByteBuffer _bb, DTSound obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DTSound __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string SoundName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoundNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetSoundNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSoundNameArray() { return __p.__vector_as_array<byte>(6); }
  public string SoundGroupName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoundGroupNameBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetSoundGroupNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSoundGroupNameArray() { return __p.__vector_as_array<byte>(8); }
  public uint SoundPriority { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Loop { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float SoundVolume { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string AssetPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssetPathBytes() { return __p.__vector_as_span(16); }
#else
  public ArraySegment<byte>? GetAssetPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAssetPathArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<DTSound> CreateDTSound(FlatBufferBuilder builder,
      uint Id = 0,
      StringOffset SoundNameOffset = default(StringOffset),
      StringOffset SoundGroupNameOffset = default(StringOffset),
      uint SoundPriority = 0,
      uint Loop = 0,
      float SoundVolume = 0.0f,
      StringOffset AssetPathOffset = default(StringOffset)) {
    builder.StartObject(7);
    DTSound.AddAssetPath(builder, AssetPathOffset);
    DTSound.AddSoundVolume(builder, SoundVolume);
    DTSound.AddLoop(builder, Loop);
    DTSound.AddSoundPriority(builder, SoundPriority);
    DTSound.AddSoundGroupName(builder, SoundGroupNameOffset);
    DTSound.AddSoundName(builder, SoundNameOffset);
    DTSound.AddId(builder, Id);
    return DTSound.EndDTSound(builder);
  }

  public static void StartDTSound(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddId(FlatBufferBuilder builder, uint Id) { builder.AddUint(0, Id, 0); }
  public static void AddSoundName(FlatBufferBuilder builder, StringOffset SoundNameOffset) { builder.AddOffset(1, SoundNameOffset.Value, 0); }
  public static void AddSoundGroupName(FlatBufferBuilder builder, StringOffset SoundGroupNameOffset) { builder.AddOffset(2, SoundGroupNameOffset.Value, 0); }
  public static void AddSoundPriority(FlatBufferBuilder builder, uint SoundPriority) { builder.AddUint(3, SoundPriority, 0); }
  public static void AddLoop(FlatBufferBuilder builder, uint Loop) { builder.AddUint(4, Loop, 0); }
  public static void AddSoundVolume(FlatBufferBuilder builder, float SoundVolume) { builder.AddFloat(5, SoundVolume, 0.0f); }
  public static void AddAssetPath(FlatBufferBuilder builder, StringOffset AssetPathOffset) { builder.AddOffset(6, AssetPathOffset.Value, 0); }
  public static Offset<DTSound> EndDTSound(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DTSound>(o);
  }
};

public struct DTSoundList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DTSoundList GetRootAsDTSoundList(ByteBuffer _bb) { return GetRootAsDTSoundList(_bb, new DTSoundList()); }
  public static DTSoundList GetRootAsDTSoundList(ByteBuffer _bb, DTSoundList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DTSoundList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DTSound? Data(int j) { int o = __p.__offset(4); return o != 0 ? (DTSound?)(new DTSound()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DTSoundList> CreateDTSoundList(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    DTSoundList.AddData(builder, dataOffset);
    return DTSoundList.EndDTSoundList(builder);
  }

  public static void StartDTSoundList(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<DTSound>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<DTSound>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DTSoundList> EndDTSoundList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DTSoundList>(o);
  }
};


}
