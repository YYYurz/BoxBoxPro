--定义为全局Table 因为在C# 层会访问
local LuaFormManager = {}
local this = LuaFormManager

print("LuaFormManager init....")

-- 需要在每个界面类里面注册在这里
this.formClassDict = {}
-- 生成的类实例
this.formInstanceDict = {}

function LuaFormManager:Startup()
	print("LuaFormManager Startup....")
end

-- 开始打开界面
function LuaFormManager.Open(formName, transform, serializeID, objs)
	local self = this
	--先看是否存在实例对象
	for className, formIndstance in pairs(self.formInstanceDict) do
		if className == formName then
			local form = self.formInstanceDict[className]

			if form.transform ~= transform then
				CS.Hr.LuaCallStatic.LuaCloseForm(form.serializeID)
				form:OnDestroy()
				form:OnCreate(transform, objs)
			end

			form:OnOpen(serializeID, objs)
			return
		end
	end

	for className, formClass in pairs(self.formClassDict) do
		if className == formName then
			local form = formClass.New(objs)
			form:OnCreate(transform, objs)
			self.formInstanceDict[className] = form
			form:OnOpen(serializeID, objs)
			return
		end
	end
end

-- 打开完成
function LuaFormManager.OnOpenComplete(formName)
	local self = this
	for className, form in pairs(self.formInstanceDict) do
		if className == formName then
			if self.formInstanceDict[className].OnOpenComplete then
				self.formInstanceDict[className]:OnOpenComplete()
			end
		end
	end
end

-- 更新
function LuaFormManager.OnUpdate(formName, elapseSeconds, realElapseSeconds)
	local self = this
	for className, form in pairs(self.formInstanceDict) do
		if className == formName then
			if self.formInstanceDict[className].OnUpdate then
				self.formInstanceDict[className]:OnUpdate(elapseSeconds, realElapseSeconds)
			end
		end
	end
end

-- 开始关闭界面
function LuaFormManager.OnClose(formName)
	local self = this
	for className, form in pairs(self.formInstanceDict) do
		if className == formName then
			if self.formInstanceDict[className].OnClose then
				self.formInstanceDict[className]:OnClose()
			end
		end
	end
end

-- 销毁界面
function LuaFormManager.OnDestroy(formName)
	local self = this
	for className, form in pairs(self.formInstanceDict) do
		if className == formName then
			if self.formInstanceDict[className].OnDestroy then
				self.formInstanceDict[className]:OnDestroy()
			end
			self.formInstanceDict[className] = nil
		end
	end
end

return LuaFormManager
