# automatically generated by the FlatBuffers compiler, do not modify

# namespace: GameConfig

import flatbuffers

class DTGameConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDTGameConfig(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DTGameConfig()
        x.Init(buf, n + offset)
        return x

    # DTGameConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DTGameConfig
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DTGameConfig
    def GlobalConfigParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DTGameConfig
    def GlobalConfigParamB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DTGameConfig
    def GlobalConfigParamBAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # DTGameConfig
    def GlobalConfigParamBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DTGameConfig
    def GlobalConfigParamCK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DTGameConfig
    def GlobalConfigParamCKAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # DTGameConfig
    def GlobalConfigParamCKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DTGameConfig
    def GlobalConfigParamCV(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DTGameConfig
    def GlobalConfigParamCVAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # DTGameConfig
    def GlobalConfigParamCVLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def DTGameConfigStart(builder): builder.StartObject(5)
def DTGameConfigAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def DTGameConfigAddGlobalConfigParam(builder, GlobalConfigParam): builder.PrependUint32Slot(1, GlobalConfigParam, 0)
def DTGameConfigAddGlobalConfigParamB(builder, GlobalConfigParamB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(GlobalConfigParamB), 0)
def DTGameConfigStartGlobalConfigParamBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DTGameConfigAddGlobalConfigParamCK(builder, GlobalConfigParamCK): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(GlobalConfigParamCK), 0)
def DTGameConfigStartGlobalConfigParamCKVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DTGameConfigAddGlobalConfigParamCV(builder, GlobalConfigParamCV): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(GlobalConfigParamCV), 0)
def DTGameConfigStartGlobalConfigParamCVVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DTGameConfigEnd(builder): return builder.EndObject()
