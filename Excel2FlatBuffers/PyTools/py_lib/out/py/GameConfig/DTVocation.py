# automatically generated by the FlatBuffers compiler, do not modify

# namespace: GameConfig

import flatbuffers

class DTVocation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDTVocation(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DTVocation()
        x.Init(buf, n + offset)
        return x

    # DTVocation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DTVocation
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DTVocation
    def MaxHealth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DTVocation
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def DTVocationStart(builder): builder.StartObject(3)
def DTVocationAddId(builder, Id): builder.PrependUint32Slot(0, Id, 0)
def DTVocationAddMaxHealth(builder, MaxHealth): builder.PrependFloat32Slot(1, MaxHealth, 0.0)
def DTVocationAddMoveSpeed(builder, MoveSpeed): builder.PrependFloat32Slot(2, MoveSpeed, 0.0)
def DTVocationEnd(builder): return builder.EndObject()
