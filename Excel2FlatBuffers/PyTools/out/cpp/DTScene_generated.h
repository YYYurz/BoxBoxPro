// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DTSCENE_GAMECONFIG_H_
#define FLATBUFFERS_GENERATED_DTSCENE_GAMECONFIG_H_

#include "flatbuffers/flatbuffers.h"

#include "FP_generated.h"

namespace GameConfig {

struct DTScene;

struct DTSceneList;

struct DTScene FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ASSETNAME = 6
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *AssetName() const {
    return GetPointer<const flatbuffers::String *>(VT_ASSETNAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_ASSETNAME) &&
           verifier.VerifyString(AssetName()) &&
           verifier.EndTable();
  }
};

struct DTSceneBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(DTScene::VT_ID, Id, 0);
  }
  void add_AssetName(flatbuffers::Offset<flatbuffers::String> AssetName) {
    fbb_.AddOffset(DTScene::VT_ASSETNAME, AssetName);
  }
  explicit DTSceneBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DTSceneBuilder &operator=(const DTSceneBuilder &);
  flatbuffers::Offset<DTScene> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DTScene>(end);
    return o;
  }
};

inline flatbuffers::Offset<DTScene> CreateDTScene(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    flatbuffers::Offset<flatbuffers::String> AssetName = 0) {
  DTSceneBuilder builder_(_fbb);
  builder_.add_AssetName(AssetName);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline flatbuffers::Offset<DTScene> CreateDTSceneDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const char *AssetName = nullptr) {
  auto AssetName__ = AssetName ? _fbb.CreateString(AssetName) : 0;
  return GameConfig::CreateDTScene(
      _fbb,
      Id,
      AssetName__);
}

struct DTSceneList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<DTScene>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DTScene>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct DTSceneListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DTScene>>> data) {
    fbb_.AddOffset(DTSceneList::VT_DATA, data);
  }
  explicit DTSceneListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DTSceneListBuilder &operator=(const DTSceneListBuilder &);
  flatbuffers::Offset<DTSceneList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DTSceneList>(end);
    return o;
  }
};

inline flatbuffers::Offset<DTSceneList> CreateDTSceneList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DTScene>>> data = 0) {
  DTSceneListBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<DTSceneList> CreateDTSceneListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<DTScene>> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<DTScene>>(*data) : 0;
  return GameConfig::CreateDTSceneList(
      _fbb,
      data__);
}

}  // namespace GameConfig

#endif  // FLATBUFFERS_GENERATED_DTSCENE_GAMECONFIG_H_
