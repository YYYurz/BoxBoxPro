// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DTGAMECONFIG_GAMECONFIG_H_
#define FLATBUFFERS_GENERATED_DTGAMECONFIG_GAMECONFIG_H_

#include "flatbuffers/flatbuffers.h"

#include "FP_generated.h"

namespace GameConfig {

struct DTGameConfig;

struct DTGameConfigList;

struct DTGameConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_GLOBALCONFIGPARAM = 6,
    VT_GLOBALCONFIGPARAMB = 8,
    VT_GLOBALCONFIGPARAMCK = 10,
    VT_GLOBALCONFIGPARAMCV = 12
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t GlobalConfigParam() const {
    return GetField<uint32_t>(VT_GLOBALCONFIGPARAM, 0);
  }
  const flatbuffers::Vector<uint32_t> *GlobalConfigParamB() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_GLOBALCONFIGPARAMB);
  }
  const flatbuffers::Vector<uint32_t> *GlobalConfigParamCK() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_GLOBALCONFIGPARAMCK);
  }
  const flatbuffers::Vector<uint32_t> *GlobalConfigParamCV() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_GLOBALCONFIGPARAMCV);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<uint32_t>(verifier, VT_GLOBALCONFIGPARAM) &&
           VerifyOffset(verifier, VT_GLOBALCONFIGPARAMB) &&
           verifier.VerifyVector(GlobalConfigParamB()) &&
           VerifyOffset(verifier, VT_GLOBALCONFIGPARAMCK) &&
           verifier.VerifyVector(GlobalConfigParamCK()) &&
           VerifyOffset(verifier, VT_GLOBALCONFIGPARAMCV) &&
           verifier.VerifyVector(GlobalConfigParamCV()) &&
           verifier.EndTable();
  }
};

struct DTGameConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(DTGameConfig::VT_ID, id, 0);
  }
  void add_GlobalConfigParam(uint32_t GlobalConfigParam) {
    fbb_.AddElement<uint32_t>(DTGameConfig::VT_GLOBALCONFIGPARAM, GlobalConfigParam, 0);
  }
  void add_GlobalConfigParamB(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> GlobalConfigParamB) {
    fbb_.AddOffset(DTGameConfig::VT_GLOBALCONFIGPARAMB, GlobalConfigParamB);
  }
  void add_GlobalConfigParamCK(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> GlobalConfigParamCK) {
    fbb_.AddOffset(DTGameConfig::VT_GLOBALCONFIGPARAMCK, GlobalConfigParamCK);
  }
  void add_GlobalConfigParamCV(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> GlobalConfigParamCV) {
    fbb_.AddOffset(DTGameConfig::VT_GLOBALCONFIGPARAMCV, GlobalConfigParamCV);
  }
  explicit DTGameConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DTGameConfigBuilder &operator=(const DTGameConfigBuilder &);
  flatbuffers::Offset<DTGameConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DTGameConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<DTGameConfig> CreateDTGameConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    uint32_t GlobalConfigParam = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> GlobalConfigParamB = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> GlobalConfigParamCK = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> GlobalConfigParamCV = 0) {
  DTGameConfigBuilder builder_(_fbb);
  builder_.add_GlobalConfigParamCV(GlobalConfigParamCV);
  builder_.add_GlobalConfigParamCK(GlobalConfigParamCK);
  builder_.add_GlobalConfigParamB(GlobalConfigParamB);
  builder_.add_GlobalConfigParam(GlobalConfigParam);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<DTGameConfig> CreateDTGameConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    uint32_t GlobalConfigParam = 0,
    const std::vector<uint32_t> *GlobalConfigParamB = nullptr,
    const std::vector<uint32_t> *GlobalConfigParamCK = nullptr,
    const std::vector<uint32_t> *GlobalConfigParamCV = nullptr) {
  auto GlobalConfigParamB__ = GlobalConfigParamB ? _fbb.CreateVector<uint32_t>(*GlobalConfigParamB) : 0;
  auto GlobalConfigParamCK__ = GlobalConfigParamCK ? _fbb.CreateVector<uint32_t>(*GlobalConfigParamCK) : 0;
  auto GlobalConfigParamCV__ = GlobalConfigParamCV ? _fbb.CreateVector<uint32_t>(*GlobalConfigParamCV) : 0;
  return GameConfig::CreateDTGameConfig(
      _fbb,
      id,
      GlobalConfigParam,
      GlobalConfigParamB__,
      GlobalConfigParamCK__,
      GlobalConfigParamCV__);
}

struct DTGameConfigList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<DTGameConfig>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DTGameConfig>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct DTGameConfigListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DTGameConfig>>> data) {
    fbb_.AddOffset(DTGameConfigList::VT_DATA, data);
  }
  explicit DTGameConfigListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DTGameConfigListBuilder &operator=(const DTGameConfigListBuilder &);
  flatbuffers::Offset<DTGameConfigList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DTGameConfigList>(end);
    return o;
  }
};

inline flatbuffers::Offset<DTGameConfigList> CreateDTGameConfigList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DTGameConfig>>> data = 0) {
  DTGameConfigListBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<DTGameConfigList> CreateDTGameConfigListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<DTGameConfig>> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<DTGameConfig>>(*data) : 0;
  return GameConfig::CreateDTGameConfigList(
      _fbb,
      data__);
}

}  // namespace GameConfig

#endif  // FLATBUFFERS_GENERATED_DTGAMECONFIG_GAMECONFIG_H_
