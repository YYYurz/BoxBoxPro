// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DTVOCATION_GAMECONFIG_H_
#define FLATBUFFERS_GENERATED_DTVOCATION_GAMECONFIG_H_

#include "flatbuffers/flatbuffers.h"

#include "FP_generated.h"

namespace GameConfig {

struct DTVocation;

struct DTVocationList;

struct DTVocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_MAXHEALTH = 6,
    VT_MOVESPEED = 8
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  float MaxHealth() const {
    return GetField<float>(VT_MAXHEALTH, 0.0f);
  }
  float MoveSpeed() const {
    return GetField<float>(VT_MOVESPEED, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<float>(verifier, VT_MAXHEALTH) &&
           VerifyField<float>(verifier, VT_MOVESPEED) &&
           verifier.EndTable();
  }
};

struct DTVocationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(DTVocation::VT_ID, Id, 0);
  }
  void add_MaxHealth(float MaxHealth) {
    fbb_.AddElement<float>(DTVocation::VT_MAXHEALTH, MaxHealth, 0.0f);
  }
  void add_MoveSpeed(float MoveSpeed) {
    fbb_.AddElement<float>(DTVocation::VT_MOVESPEED, MoveSpeed, 0.0f);
  }
  explicit DTVocationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DTVocationBuilder &operator=(const DTVocationBuilder &);
  flatbuffers::Offset<DTVocation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DTVocation>(end);
    return o;
  }
};

inline flatbuffers::Offset<DTVocation> CreateDTVocation(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    float MaxHealth = 0.0f,
    float MoveSpeed = 0.0f) {
  DTVocationBuilder builder_(_fbb);
  builder_.add_MoveSpeed(MoveSpeed);
  builder_.add_MaxHealth(MaxHealth);
  builder_.add_Id(Id);
  return builder_.Finish();
}

struct DTVocationList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<DTVocation>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DTVocation>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct DTVocationListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DTVocation>>> data) {
    fbb_.AddOffset(DTVocationList::VT_DATA, data);
  }
  explicit DTVocationListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DTVocationListBuilder &operator=(const DTVocationListBuilder &);
  flatbuffers::Offset<DTVocationList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DTVocationList>(end);
    return o;
  }
};

inline flatbuffers::Offset<DTVocationList> CreateDTVocationList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DTVocation>>> data = 0) {
  DTVocationListBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<DTVocationList> CreateDTVocationListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<DTVocation>> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<DTVocation>>(*data) : 0;
  return GameConfig::CreateDTVocationList(
      _fbb,
      data__);
}

}  // namespace GameConfig

#endif  // FLATBUFFERS_GENERATED_DTVOCATION_GAMECONFIG_H_
