// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DTTEST_GAMECONFIG_H_
#define FLATBUFFERS_GENERATED_DTTEST_GAMECONFIG_H_

#include "flatbuffers/flatbuffers.h"

#include "FP_generated.h"

namespace GameConfig {

struct DTTest;

struct DTTestList;

struct DTTest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_UINAME = 6,
    VT_UIGROUPNAME = 8,
    VT_ALLOWMULTIINSTANCE = 10,
    VT_PAUSECOVEREDUIFORM = 12,
    VT_ASSETPATH = 14,
    VT_LUAFILE = 16
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *UIName() const {
    return GetPointer<const flatbuffers::String *>(VT_UINAME);
  }
  const flatbuffers::String *UIGroupName() const {
    return GetPointer<const flatbuffers::String *>(VT_UIGROUPNAME);
  }
  uint32_t AllowMultiInstance() const {
    return GetField<uint32_t>(VT_ALLOWMULTIINSTANCE, 0);
  }
  uint32_t PauseCoveredUIForm() const {
    return GetField<uint32_t>(VT_PAUSECOVEREDUIFORM, 0);
  }
  const flatbuffers::String *AssetPath() const {
    return GetPointer<const flatbuffers::String *>(VT_ASSETPATH);
  }
  const flatbuffers::String *LuaFile() const {
    return GetPointer<const flatbuffers::String *>(VT_LUAFILE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_UINAME) &&
           verifier.VerifyString(UIName()) &&
           VerifyOffset(verifier, VT_UIGROUPNAME) &&
           verifier.VerifyString(UIGroupName()) &&
           VerifyField<uint32_t>(verifier, VT_ALLOWMULTIINSTANCE) &&
           VerifyField<uint32_t>(verifier, VT_PAUSECOVEREDUIFORM) &&
           VerifyOffset(verifier, VT_ASSETPATH) &&
           verifier.VerifyString(AssetPath()) &&
           VerifyOffset(verifier, VT_LUAFILE) &&
           verifier.VerifyString(LuaFile()) &&
           verifier.EndTable();
  }
};

struct DTTestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(DTTest::VT_ID, Id, 0);
  }
  void add_UIName(flatbuffers::Offset<flatbuffers::String> UIName) {
    fbb_.AddOffset(DTTest::VT_UINAME, UIName);
  }
  void add_UIGroupName(flatbuffers::Offset<flatbuffers::String> UIGroupName) {
    fbb_.AddOffset(DTTest::VT_UIGROUPNAME, UIGroupName);
  }
  void add_AllowMultiInstance(uint32_t AllowMultiInstance) {
    fbb_.AddElement<uint32_t>(DTTest::VT_ALLOWMULTIINSTANCE, AllowMultiInstance, 0);
  }
  void add_PauseCoveredUIForm(uint32_t PauseCoveredUIForm) {
    fbb_.AddElement<uint32_t>(DTTest::VT_PAUSECOVEREDUIFORM, PauseCoveredUIForm, 0);
  }
  void add_AssetPath(flatbuffers::Offset<flatbuffers::String> AssetPath) {
    fbb_.AddOffset(DTTest::VT_ASSETPATH, AssetPath);
  }
  void add_LuaFile(flatbuffers::Offset<flatbuffers::String> LuaFile) {
    fbb_.AddOffset(DTTest::VT_LUAFILE, LuaFile);
  }
  explicit DTTestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DTTestBuilder &operator=(const DTTestBuilder &);
  flatbuffers::Offset<DTTest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DTTest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DTTest> CreateDTTest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    flatbuffers::Offset<flatbuffers::String> UIName = 0,
    flatbuffers::Offset<flatbuffers::String> UIGroupName = 0,
    uint32_t AllowMultiInstance = 0,
    uint32_t PauseCoveredUIForm = 0,
    flatbuffers::Offset<flatbuffers::String> AssetPath = 0,
    flatbuffers::Offset<flatbuffers::String> LuaFile = 0) {
  DTTestBuilder builder_(_fbb);
  builder_.add_LuaFile(LuaFile);
  builder_.add_AssetPath(AssetPath);
  builder_.add_PauseCoveredUIForm(PauseCoveredUIForm);
  builder_.add_AllowMultiInstance(AllowMultiInstance);
  builder_.add_UIGroupName(UIGroupName);
  builder_.add_UIName(UIName);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline flatbuffers::Offset<DTTest> CreateDTTestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const char *UIName = nullptr,
    const char *UIGroupName = nullptr,
    uint32_t AllowMultiInstance = 0,
    uint32_t PauseCoveredUIForm = 0,
    const char *AssetPath = nullptr,
    const char *LuaFile = nullptr) {
  auto UIName__ = UIName ? _fbb.CreateString(UIName) : 0;
  auto UIGroupName__ = UIGroupName ? _fbb.CreateString(UIGroupName) : 0;
  auto AssetPath__ = AssetPath ? _fbb.CreateString(AssetPath) : 0;
  auto LuaFile__ = LuaFile ? _fbb.CreateString(LuaFile) : 0;
  return GameConfig::CreateDTTest(
      _fbb,
      Id,
      UIName__,
      UIGroupName__,
      AllowMultiInstance,
      PauseCoveredUIForm,
      AssetPath__,
      LuaFile__);
}

struct DTTestList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<DTTest>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DTTest>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct DTTestListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DTTest>>> data) {
    fbb_.AddOffset(DTTestList::VT_DATA, data);
  }
  explicit DTTestListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DTTestListBuilder &operator=(const DTTestListBuilder &);
  flatbuffers::Offset<DTTestList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DTTestList>(end);
    return o;
  }
};

inline flatbuffers::Offset<DTTestList> CreateDTTestList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DTTest>>> data = 0) {
  DTTestListBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<DTTestList> CreateDTTestListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<DTTest>> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<DTTest>>(*data) : 0;
  return GameConfig::CreateDTTestList(
      _fbb,
      data__);
}

}  // namespace GameConfig

#endif  // FLATBUFFERS_GENERATED_DTTEST_GAMECONFIG_H_
