// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfig
{

using global::System;
using global::FlatBuffers;

public struct DTGameConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DTGameConfig GetRootAsDTGameConfig(ByteBuffer _bb) { return GetRootAsDTGameConfig(_bb, new DTGameConfig()); }
  public static DTGameConfig GetRootAsDTGameConfig(ByteBuffer _bb, DTGameConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DTGameConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint GlobalConfigParam { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint GlobalConfigParamB(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int GlobalConfigParamBLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGlobalConfigParamBBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetGlobalConfigParamBBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public uint[] GetGlobalConfigParamBArray() { return __p.__vector_as_array<uint>(8); }
  public uint GlobalConfigParamCK(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int GlobalConfigParamCKLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGlobalConfigParamCKBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetGlobalConfigParamCKBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public uint[] GetGlobalConfigParamCKArray() { return __p.__vector_as_array<uint>(10); }
  public uint GlobalConfigParamCV(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int GlobalConfigParamCVLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGlobalConfigParamCVBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetGlobalConfigParamCVBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public uint[] GetGlobalConfigParamCVArray() { return __p.__vector_as_array<uint>(12); }

  public static Offset<DTGameConfig> CreateDTGameConfig(FlatBufferBuilder builder,
      uint id = 0,
      uint GlobalConfigParam = 0,
      VectorOffset GlobalConfigParamBOffset = default(VectorOffset),
      VectorOffset GlobalConfigParamCKOffset = default(VectorOffset),
      VectorOffset GlobalConfigParamCVOffset = default(VectorOffset)) {
    builder.StartObject(5);
    DTGameConfig.AddGlobalConfigParamCV(builder, GlobalConfigParamCVOffset);
    DTGameConfig.AddGlobalConfigParamCK(builder, GlobalConfigParamCKOffset);
    DTGameConfig.AddGlobalConfigParamB(builder, GlobalConfigParamBOffset);
    DTGameConfig.AddGlobalConfigParam(builder, GlobalConfigParam);
    DTGameConfig.AddId(builder, id);
    return DTGameConfig.EndDTGameConfig(builder);
  }

  public static void StartDTGameConfig(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(0, id, 0); }
  public static void AddGlobalConfigParam(FlatBufferBuilder builder, uint GlobalConfigParam) { builder.AddUint(1, GlobalConfigParam, 0); }
  public static void AddGlobalConfigParamB(FlatBufferBuilder builder, VectorOffset GlobalConfigParamBOffset) { builder.AddOffset(2, GlobalConfigParamBOffset.Value, 0); }
  public static VectorOffset CreateGlobalConfigParamBVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGlobalConfigParamBVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGlobalConfigParamBVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGlobalConfigParamCK(FlatBufferBuilder builder, VectorOffset GlobalConfigParamCKOffset) { builder.AddOffset(3, GlobalConfigParamCKOffset.Value, 0); }
  public static VectorOffset CreateGlobalConfigParamCKVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGlobalConfigParamCKVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGlobalConfigParamCKVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGlobalConfigParamCV(FlatBufferBuilder builder, VectorOffset GlobalConfigParamCVOffset) { builder.AddOffset(4, GlobalConfigParamCVOffset.Value, 0); }
  public static VectorOffset CreateGlobalConfigParamCVVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGlobalConfigParamCVVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGlobalConfigParamCVVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DTGameConfig> EndDTGameConfig(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DTGameConfig>(o);
  }
};

public struct DTGameConfigList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DTGameConfigList GetRootAsDTGameConfigList(ByteBuffer _bb) { return GetRootAsDTGameConfigList(_bb, new DTGameConfigList()); }
  public static DTGameConfigList GetRootAsDTGameConfigList(ByteBuffer _bb, DTGameConfigList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DTGameConfigList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DTGameConfig? Data(int j) { int o = __p.__offset(4); return o != 0 ? (DTGameConfig?)(new DTGameConfig()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DTGameConfigList> CreateDTGameConfigList(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    DTGameConfigList.AddData(builder, dataOffset);
    return DTGameConfigList.EndDTGameConfigList(builder);
  }

  public static void StartDTGameConfigList(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<DTGameConfig>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<DTGameConfig>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DTGameConfigList> EndDTGameConfigList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DTGameConfigList>(o);
  }
};


}
