-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: GameConfig

local flatbuffers = require('3rd.flatbuffers')

local DTVocation = {} -- the module
local DTVocation_mt = {} -- the class metatable

function DTVocation.New()
    local o = {}
    setmetatable(o, {__index = DTVocation_mt})
    return o
end
function DTVocation.GetRootAsDTVocation(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DTVocation.New()
    o:Init(buf, n + offset)
    return o
end
function DTVocation_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DTVocation_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Uint32, o + self.view.pos)
    end
    return 0
end
function DTVocation_mt:MaxHealth()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Float32, o + self.view.pos)
    end
    return 0.0
end
function DTVocation_mt:MoveSpeed()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Float32, o + self.view.pos)
    end
    return 0.0
end
function DTVocation.Start(builder) builder:StartObject(3) end
function DTVocation.AddId(builder, Id) builder:PrependUint32Slot(0, Id, 0) end
function DTVocation.AddMaxHealth(builder, MaxHealth) builder:PrependFloat32Slot(1, MaxHealth, 0.0) end
function DTVocation.AddMoveSpeed(builder, MoveSpeed) builder:PrependFloat32Slot(2, MoveSpeed, 0.0) end
function DTVocation.End(builder) return builder:EndObject() end

return DTVocation -- return the module